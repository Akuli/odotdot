var test = (import "utils").test;
var throws = (import "utils").throws;


test "simple stuff" {
    var stuff = [];
    for { var i=0; } { (i != 5) } { i = (i + 1); } {
        stuff.push i;
    };
    assert (stuff == [0 1 2 3 4]);
    throws VariableError {
        # must not leak the i
        debug i;
    };

    var i = 5;
    while { (i != 10) } {
        stuff.push i;
        i = (i + 1);
    };
    assert (stuff == [0 1 2 3 4 5 6 7 8 9]);
    assert (i == 10);   # it wasn't deleted magically, which is good
};

test "for" {
    var what_happened = [];
    for { what_happened.push "init"; var i = 0; }
        { what_happened.push "cond"; return (i != 5); }
        { what_happened.push "incr"; i = (i + 1); }
    {
        what_happened.push "body";
    };

    assert (what_happened == [
        "init"
        "cond" "body" "incr"
        "cond" "body" "incr"
        "cond" "body" "incr"
        "cond" "body" "incr"
        "cond" "body" "incr"
        "cond"
    ]);

    what_happened = [];
    var ok = true;

    throws ArgError {
        for { throw (new ArgError "oops"); } { ok = false; return true; } { ok = false; } { ok = false; };
    };
    assert ok;

    throws ArgError {
        for { } { throw (new ArgError "oops"); } { ok = false; } { ok = false; };
    };
    assert ok;

    var how_many_times = 0;
    throws ArgError {
        for { } { true } { throw (new ArgError "oops"); } { how_many_times = (how_many_times + 1); };
    };
    assert (how_many_times == 1);

    throws ArgError {
        for { } { true } { ok = false; } { throw (new ArgError "oops"); };
    };
    assert ok;
};

test "scopes" {
    var scopes = [];
    for { scopes.push {}.definition_scope; var i = 0; }
        { scopes.push {}.definition_scope; return (i != 2); }
        { scopes.push {}.definition_scope; i = (i + 1); }
    {
        scopes.push {}.definition_scope;
    };

    # a scope should have gotten pushed exactly 8 times, and must be the same scope every time
    assert (scopes.length == 8);
    foreach "scope" scopes {
        assert (scope `same_object` (scopes.get 0));
    };
    assert (not ((scopes.get 0) `same_object` {}.definition_scope));
};
