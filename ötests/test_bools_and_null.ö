var test = (import "utils").test;
var throws = (import "utils").throws;


test "important basic stuff" {
    assert (true == true);
    assert (false == false);
    assert (true != false);
};

test "classes" {
    assert ((get_class true) `same_object` Bool);
    assert ((get_class false) `same_object` Bool);
    assert (Bool.name == "Bool");
};

test "to_string" {
    throws AttribError { true.to_string; };
    throws AttribError { false.to_string; };
};

test "to_debug_string" {
    assert (true.(to_debug_string) == "true");
    assert (false.(to_debug_string) == "false");
};

test "creating more Bools" {
    throws TypeError {
        var file_not_found = (new Bool);
    };

    class "ThreeStateBool" inherits:Bool { };
    throws TypeError {
        var file_not_found = (new ThreeStateBool);
    };
};

test "and, or" {
    assert ((true `and` true) `same_object` true);
    assert ((false `and` true) `same_object` false);
    assert ((false `and` true) `same_object` false);
    assert ((false `and` false) `same_object` false);

    assert ((true `or` true) `same_object` true);    # it's not xor
    assert ((true `or` false) `same_object` true);
    assert ((false `or` true) `same_object` true);
    assert ((false `or` false) `same_object` false);

    [and or].foreach "function" {
        [ 123 "asda" "true" "yes" (new Mapping a:1 b:2) [1 2 3] [] ].foreach "notbool" {
            throws TypeError { notbool `function` notbool; };
            throws TypeError { notbool `function` true; };
            throws TypeError { notbool `function` false; };
            throws TypeError { true `function` notbool; };
            throws TypeError { false `function` notbool; };
        };
    };
};
