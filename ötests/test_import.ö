var test = (import "utils").test;
var throws = (import "utils").throws;

var imports = (import "<std>/imports");
var stacks = (import "<std>/stacks");


test "basic stuff" {
    var x = (import "<std>/imports");
    var y = (import "<std>/imports");
    var z = (import "<std>/imports");
    assert (x `same_object` y);
    assert (y `same_object` z);
};

test "importing something that doesn't exist" {
    throws ValueError { var _ = (import "asdijoasdfojasdiofjoiasdjf"); };
    throws ValueError { var _ = (import "<std>/asdijoasdfojasdiofjoiasdjf"); };
};

test "including .รถ extension in the import string" {
    # the throws util doesn't support accessing the error object yet :(
    var caught = false;
    catch {
        var _ = (import "asdasd.รถ");
    } [ValueError "e"] {
        assert (e.message == "import \"asdasd\" instead of \"asdasd.รถ\"");
        caught = true;
    };
    assert caught;
};

test "simple importer" {
    var stack = (stacks.get_stack);
    var this_file_name = (stack.get (stack.length - 1)).filename;
    var lib = (new (get_class imports));
    var count = 0;

    func "importer string stackframe" returning:true {
        assert (stackframe `is_instance_of` (get_class (stack.get 0)));

        if (string == "testie") {
            assert (stackframe.filename == this_file_name);   # called from this file
            count = (count + 1);
            return (new Option lib);
        } else: {
            return none;
        };
    };

    imports.importers.push importer;
    assert (count == 0);
    assert ((import "testie") `same_object` lib);
    assert (count == 1);
    assert ((import "testie") `same_object` lib);
    assert (count == 2);

    # other imports must still work
    assert (((import "testfiles/import_hello").get_hello) `same_object` (import "testfiles/hello"));
    assert (count == 2);
    throws ValueError {
        var _ = (import "this_doesnt_exist_AIOSDJOAISJFIOAJSFO");
    };
    assert (count == 2);   # the importer was pushed to the end of the importers array

    assert ((imports.importers.pop) `same_object` importer);
};

test "bad importer" {
    func "bad1 string stackframe" {
        if (string == "bad1") {
            return (new Option "lol");  # bad
        } else: {
            return none;
        };
    };

    func "bad2 string stackframe" {
        if (string == "bad2") {
            return imports;   # also bad, should return an Option
        } else: {
            return none;
        };
    };

    imports.importers.push bad1;
    imports.importers.push bad2;
    throws TypeError {
        import "bad1";
    };
    throws TypeError {
        import "bad2";
    };
    assert ((imports.importers.pop) `same_object` bad2);
    assert ((imports.importers.pop) `same_object` bad1);
};

# TODO: implement and test this stuff with case-insensitive file systems
test "built-in importer caching" {
    var lib1 = (import "<std>/imports");
    var lib2 = (import "<std>/imports");
    var lib3 = (import "testfiles/hello");
    var lib4 = (import "testfiles/hello");
    var lib5 = ((import "testfiles/import_hello").get_hello);

    assert (lib1 `same_object` lib2);
    assert (not (lib2 `same_object` lib3));
    assert (lib3 `same_object` lib4);
    assert (lib4 `same_object` lib5);   # caching works even though it's imported from different directories
};
