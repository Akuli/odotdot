var test = (import "utils").test;
var throws = (import "utils").throws;


test "chr" {
    var _ = (chr 0);
    var _ = (chr 1114111);
    throws ValueError { var _ = (chr 1114112); };
    throws ValueError { var _ = (chr (0-1)); };
    assert ((((((chr 104) + (chr 101)) + (chr 108)) + (chr 108)) + (chr 246)) == "hellö");
};

test "+, ==" {
    assert ("" == "");
    assert ("ab" == "ab");
    assert ("ab" != "ac");
    assert ("ab" != "abc");
    assert ("ä" != "a");
    assert ("ö" != "o");
    assert (("ä" + "ö") == "äö");
};

test "length" {
    assert ("o".length == 1);
    assert ("ö".length == 1);
    assert ("字".length == 1);   # the first chinese character i found on wikipedia
    assert ("oö字".length == 3);
};

test "escape sequences" {
    # FIXME: there's not a good way to check the values yet
    # e.g. make sure that \n produces a newline character and \t produces a tab
    # so we need to rely on testing examples/escapes.ö
    assert ("\n".length == 1);
    assert ("\t".length == 1);
    assert ("\"".length == 1);
    assert ("\\".length == 1);

    # combining multiple things
    var string = "\n\t\\\\\n\n\"\"";
    var array = ["\n" "\t" "\\" "\\" "\n" "\n" "\"" "\""];
    assert (string.length == 8);
    assert (array.length == 8);
    for { var i=0; } { (i != array.length) } { i = (i + 1); } {
        assert (string.(get i) == (array.get i));
    };
};

test "to_string" {
    foreach "string" ["" "asd" "töötttö ö"] {
        # should use equals instead of same_object
        # but what implementation would really be so insane that these would be different objects...
        assert (string.(to_string) `same_object` string);
    };
};

test "to_debug_string" {
    assert ("lol lmao".(to_debug_string) == "\"lol lmao\"");

    # https://xkcd.com/1638/
    assert ("ä\nö".(to_debug_string) == "\"ä\\nö\"");
    assert ("ä\tö".(to_debug_string) == "\"ä\\tö\"");
    assert ("ä\"ö".(to_debug_string) == "\"ä\\\"ö\"");
    assert ("ä\\ö".(to_debug_string) == "\"ä\\\\ö\"");

    # https://explainxkcd.com/wiki/index.php/1638:_Backslashes
    # the number of backslashes should grow exponentially, so let's test that :D
    var string = "\\";
    foreach "length" [2 4 8 16 32 64 128 256 512] {
        # call to_debug_string and remove " from both ends
        var debugged = string.(to_debug_string);
        assert (debugged.(get 0) == "\"");
        assert (debugged.(get (debugged.length - 1)) == "\"");
        string = debugged.(slice 1 (debugged.length - 1));        # no stripping method yet :(

        assert (string.length == length);
    };
};

test "array-like methods" {
    assert (String.baseclass.(get_value) `same_object` (import "<std>/collections").FrozenArrayLike);

    assert ("aåä".length == 3);
    throws AttribError { "aåä".length = 100; };

    assert (("aåä".get 0) == "a");
    assert (("aåä".get 2) == "ä");
    throws ValueError { var _ = ("aåä".get (0-1)); };
    throws ValueError { var _ = ("aåä".get 3); };

    assert (("aåä".slice 1 2) == "å");
    assert (("aåä".slice (0-123) 123) == "aåä");
};

test "split_by_whitespace" {
    var tests = [
        [" asd tööt " ["asd" "tööt"]]
        ["  asd  tööt  " ["asd" "tööt"]]
        ["  asd  tööt" ["asd" "tööt"]]
        ["asd  tööt  " ["asd" "tööt"]]
        ["asd  tööt" ["asd" "tööt"]]
        ["  " []]
        [" " []]
        ["" []]
    ];

    foreach "test" tests {
        var input = test.(get 0);
        var expected_output = test.(get 1);
        assert (input.(split_by_whitespace) == expected_output);
    };
};

test "replace" {
    assert (("hello world".replace "worl" "asdd") == "hello asddd");
    assert (("lol xyzz".replace "xy" "ab") == "lol abzz");
    assert (("lol xyzz".replace "xy" "a") == "lol azz");
    assert (("lol xyzz".replace "xy" "asdasd") == "lol asdasdzz");

    # test which args can be empty
    assert (("abcxyz".replace "x" "") == "abcyz");
    assert (("".replace "asd" "asda") == "");
    throws ValueError { var _ = ("lol".replace "" "asd"); };

    # characters that are results of a replace must not be replaced again
    # so this needs multiple replaces, not just one
    var string = "asdddddasddddda";
    string = string.(replace "dasd" "as"); assert (string == "asddddasdddda");
    string = string.(replace "dasd" "as"); assert (string == "asdddasddda");
    string = string.(replace "dasd" "as"); assert (string == "asddasdda");
    string = string.(replace "dasd" "as"); assert (string == "asdasda");
    string = string.(replace "dasd" "as"); assert (string == "asasa");
    string = string.(replace "dasd" "as"); assert (string == "asasa");

    string = "aaaab";
    string = string.(replace "ab" "bb"); assert (string == "aaabb");
    string = string.(replace "ab" "bb"); assert (string == "aabbb");
    string = string.(replace "ab" "bb"); assert (string == "abbbb");
    string = string.(replace "ab" "bb"); assert (string == "bbbbb");
    string = string.(replace "ab" "bb"); assert (string == "bbbbb");

    string = "abbbb";
    string = string.(replace "ab" "aa"); assert (string == "aabbb");
    string = string.(replace "ab" "aa"); assert (string == "aaabb");
    string = string.(replace "ab" "aa"); assert (string == "aaaab");
    string = string.(replace "ab" "aa"); assert (string == "aaaaa");
    string = string.(replace "ab" "aa"); assert (string == "aaaaa");
};
