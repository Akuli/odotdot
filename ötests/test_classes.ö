# TODO: more tests!!

var test = (import "utils").test;
var throws = (import "utils").throws;


test "attrib" {
    throws TypeError {
        class "Lol" {
            attrib 123;
        };
    };
};

class "AB" { };
class "A" inherits:AB { };
class "B" inherits:AB { };

test "to_debug_string" {
    assert ((String.to_debug_string) == "<Class \"String\">");
    assert ((A.to_debug_string) == "<Class \"A\">");
    assert ((AB.to_debug_string) == "<Class \"AB\">");
};

test "baseclass" {
    assert ((String.baseclass.get_value) `same_object` Object);
    assert ((Integer.baseclass.get_value) `same_object` Object);
    assert Object.baseclass.is_none;
    assert ((A.baseclass.get_value) `same_object` AB);
    assert ((B.baseclass.get_value) `same_object` AB);
    assert ((AB.baseclass.get_value) `same_object` Object);
};

# TODO: document getter and setter!!
test "getter and setter" {
    var log = "asd";   # pushing to this throws an error for now, which is good

    class "Thingy" {
        getter "thing" {
            log.push "getter";
            return "lol";
        };
        setter "thing" "new_value" {
            log.push "setter";
            log.push new_value;
        };
    };

    class "SubThingy" inherits:Thingy {
        getter "thing" {
            log.push "subgetter";
            return "lol";
        };
    };

    foreach "pair" [[Thingy "getter"] [SubThingy "subgetter"]] {
        var thingy = (new (pair.get 0));
        var get_message = (pair.get 1);

        log = [];
        assert (thingy.thing == "lol");
        assert (log == [get_message]);
        thingy.thing = "asd";
        assert (log == [get_message "setter" "asd"]);
    };
};

test "abstract" {
    class "AbstractThing" {
        abstract "thing";
    };

    var at = (new AbstractThing);   # must not throw yet
    throws AttribError {
        debug at.thing;
    };

    class "AbstractSetup" {
        abstract "setup";
    };
    throws AttribError {
        var _ = (new AbstractSetup);
    };
};

test "is_instance_of" {
    assert ("lol" `is_instance_of` String);
    assert (123 `is_instance_of` Integer);
    assert (not (123 `is_instance_of` String));
    assert (not ("lol" `is_instance_of` Integer));

    assert ((new A) `is_instance_of` A);
    assert (not ((new A) `is_instance_of` B));
    assert ((new A) `is_instance_of` AB);

    assert (not ((new B) `is_instance_of` A));
    assert ((new B) `is_instance_of` B);
    assert ((new B) `is_instance_of` AB);

    assert (not ((new AB) `is_instance_of` A));
    assert (not ((new AB) `is_instance_of` B));
    assert ((new AB) `is_instance_of` AB);
};
