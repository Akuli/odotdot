var test = (import "utils").test;
var throws = (import "utils").throws;


test "returning and non-returning funcs" {
    # lambdas should do the exact same things as funcs, so... no need to do many lambda tests imo
    func "returning1" returning:true { return "hi"; };
    func "returning2" returning:true { "hi" };  # with syntactic sugar
    var returning3 = (lambda "" returning:true { "hi" });

    var asd = [];
    func "notreturning1" returning:false { asd.push "hi"; };
    func "notreturning2" { asd.push "hi"; };

    foreach "f" [returning1 returning2 returning3] {
        assert ((f) == "hi");
        throws TypeError { f; };
    };

    foreach "f" [notreturning1 notreturning2] {
        # clear the asd
        while { (asd.length > 0) } {
            [].push asd.(pop);
        };

        f;
        assert (asd == ["hi"]);
        throws TypeError { asd.push (f); };
        assert (asd == ["hi"]);   # it didn't run
    };
};

test "'returning' attribute" {
    var tests = [
        [(lambda "" {}) false]
        [(lambda "" returning:false {}) false]
        [(lambda "" returning:true {}) true]
    ];
    foreach "test" tests {
        var function = test.(get 0);
        var value = test.(get 1);

        assert (function.returning `same_object` value);
        throws AttribError { function.returning = value; };
        assert (function.returning `same_object` value);
        throws AttribError { function.returning = (not value); };
        assert (function.returning `same_object` value);
    };
    assert (not (lambda "" {}).returning);
    foreach "value" [true false] {
        assert ((lambda "" returning:value {}).returning `same_object` value);
    };
};

test "missing return" {
    func "broken" returning:true { };
    throws ValueError { [].push (broken); };
};

# TODO: early returning: 'return;' in non-returning function should stop the func

test "things that used to make my interpreter segfault" {
    # getters should be functions
    class "A" { };
    A.getters.set "setup" "lol";
    throws TypeError { new A; };

    # getters should return a function instead of "lol"
    class "B" { };
    B.getters.set "setup" (lambda "this" returning:true { return "lol"; });
    throws TypeError { new B; };

    # in my interpreter, setup is handled a bit differently than other methods
    # so also test one of the other ones
    # this tests to_debug_string, Mapping.get calls it when creating the KeyError message
    class "C" { };
    C.getters.set "to_debug_string" (lambda "this" returning:true { return "lol"; });
    var c = (new C);
    assert (c.to_debug_string == "lol");    # intentionally broken! should return the method, not "lol"
    

    var mapping = (new Mapping);
    throws TypeError { var _ = (c.to_debug_string); };
    throws TypeError { mapping.get c; };
};

test "throwing MarkerError" {
    # functions use MarkerError to implement returning, so make sure they do it right
    func "one" {
        throw (new MarkerError "oh no");
    };
    func "two" returning:true {
        throw (new MarkerError "oh no");
    };

    throws MarkerError { one; };
    throws MarkerError { _ = (two); };
};

test "partial" {
    var ran = 0;
    func "runs block" {
        assert (ran == 0);
        var result = block.(run_with_return block.definition_scope);
        assert (result == "hello");
        assert (ran == 1);
        ran = 0;
    };

    func "f a b c?" returning:true {
        assert (a == 1);
        assert (b == 2);
        assert (c.(get_value) == 3);
        ran = (ran+1);
        return "hello";
    };

    var partial = f.(partial);
    var partial1 = f.(partial 1);
    var partial12 = f.(partial 1 2);
    var partial13 = f.(partial 1 c:3);
    var partial123 = f.(partial 1 2 c:3);
    var partial124 = f.(partial 1 2 c:4);

    foreach "some_partial" [partial partial1 partial12 partial13 partial123 partial124] {
        assert (some_partial.name == "partial of f");
        assert (some_partial.(to_debug_string) == "<Function \"partial of f\">");
    };

    runs { (partial 1 2 c:3) };
    runs { (partial1 2 c:3) };
    runs { (partial12 c:3) };
    runs { (partial13 2) };
    runs { (partial123) };
    runs { (partial124 c:3) };   # should override c:4 in partial124

    # test missing arguments
    throws ArgError { var _ = (partial); };
    throws ArgError { var _ = (partial1); };
    throws ArgError { var _ = (partial13); };

    throws AssertError {
        var _ = (partial124);   # should use the wrong c
    };
    assert (ran == 0);
};
