var test = (import "utils").test;
var throws = (import "utils").throws;


test "things that used to make my interpreter segfault" {
    # getters should be functions
    class "A" { };
    A.getters.set "setup" "lol";
    throws TypeError { new A; };

    # getters should return a function instead of "lol"
    class "B" { };
    B.getters.set "setup" (lambda "this" { return "lol"; });
    throws TypeError { new B; };

    # in my interpreter, setup is handled a bit differently than other methods
    # so also test one of the other ones
    # this tests to_debug_string, Mapping.get calls it when creating the KeyError message
    class "C" { };
    C.getters.set "to_debug_string" (lambda "this" { return "lol"; });
    var c = (new C);
    assert (c.to_debug_string == "lol");
    var mapping = (new Mapping);
    throws TypeError {
        mapping.get c;
    };
};

test "partial" {
    var ran = 0;
    func "runs block" {
        assert (ran == 0);
        var result = (block.run_with_return block.definition_scope);
        assert (result == "hello");
        assert (ran == 1);
        ran = 0;
    };

    func "f a b c:" {
        assert (a == 1);
        assert (b == 2);
        assert (c == 3);
        ran = (ran+1);
        return "hello";
    };

    var partial = (f.partial);
    var partial1 = (f.partial 1);
    var partial12 = (f.partial 1 2);
    var partial13 = (f.partial 1 c:3);
    var partial123 = (f.partial 1 2 c:3);
    var partial124 = (f.partial 1 2 c:4);

    foreach "some_partial" [partial partial1 partial12 partial13 partial123 partial124] {
        assert (some_partial.name == "partial of f");
        assert ((some_partial.to_debug_string) == "<Function \"partial of f\">");
    };

    runs { (partial 1 2 c:3) };
    runs { (partial1 2 c:3) };
    runs { (partial12 c:3) };
    runs { (partial13 2) };
    runs { (partial123) };
    runs { (partial124 c:3) };   # should override c:4 in partial124

    # test missing arguments
    throws ArgError { partial; };
    throws ArgError { partial1; };
    throws ArgError { partial13; };

    throws AssertError {
        partial124;   # should use the wrong c
    };
    assert (ran == 0);
};
