var test = (import "utils").test;
var throws = (import "utils").throws;

test "nested arrays" {
    # nothing very special here
    # just want to make sure that nested [ ] get parsed correctly
    var nested = ["a" ["b" "c" ] [["d" "e"]]];
    assert (nested.length == 3);
    assert ((nested.get 0) == "a");
    assert ((nested.get 1) == ["b" "c"]);
    assert ((nested.get 2).length == 1);
    assert (((nested.get 2).get 0) == ["d" "e"]);
};

test "foreach" {
    var res = [];
    foreach "number" [1 2 3] {
        res.push number;
    };
    assert (res == [1 2 3]);

    res = [];
    throws KeyError {
        foreach "number" [1 2 3] {
            res.push number;
            throw (new KeyError "oh no");
        };
    };
    # the push should have ran once, before the first error
    assert (res == [1]);
};

test "basic stuff" {
    # [] must create a new array every time
    func "lol" { return []; };
    assert (not ((lol) `same_object` (lol)));
    (lol).push "TOOT";
    assert ((lol).length == 0);

    var array = ["a" "b" "c"];
    assert (array.length == 3);
    throws AttribError { array.length = 100; };

    assert ((array.get 0) == "a");
    assert ((array.get 2) == "c");
    throws ValueError { array.get (0-1); };
    throws ValueError { array.get 3; };

    assert (array == ["a" "b" "c"]);
    assert (["a" "b" "c"] == array);

    foreach "nope" [["a" "b"] ["a" "b" "c" "d"] ["a" "b" "x"] ["x" "y" "z"]] {
        assert ((array != nope) `and` (nope != array));
    };

    array.push "d";
    assert (array == ["a" "b" "c" "d"]);

    assert ((array.pop) == "d");
    assert (array == ["a" "b" "c"]);

    array.set 0 "x";
    assert (array == ["x" "b" "c"]);
    array.set 2 "y";
    assert (array == ["x" "b" "y"]);
    throws ValueError { array.set (0-1) "z"; };
    throws ValueError { array.set 3 "z"; };
    assert (array == ["x" "b" "y"]);

    assert ((array.slice 1 2) == ["b"]);
    assert ((array.slice (0-123) 123) == array);    # out-of-bounds indexes are ok
};

test "to_debug_string" {
    class "Broken" {
        method "to_debug_string" {
            throw (new MathError "numberphile is wrong, it's not -1/12");
        };
    };

    assert (([].to_debug_string) == "[]");
    assert (([1].to_debug_string) == "[1]");
    assert (([1 2 3].to_debug_string) == "[1 2 3]");
    assert (([ 1 [2] [ [3] ] ].to_debug_string) == "[1 [2] [[3]]]");
    assert (([ "asd" "lol" ].to_debug_string) == "[\"asd\" \"lol\"]");
    throws MathError {
        [(new Broken)].to_debug_string;
    };
    print "ok";
};
