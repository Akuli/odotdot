var test = (import "utils").test;
var throws = (import "utils").throws;


var MANY_ZEROS = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
var MANY_ASDS = "asdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd";

test "equals" {
    assert (1 == 1);
    assert (2 == 2);
    assert ((0-1) == (0-1));
    assert (1 != (0-1));
    assert (1 != 0);
    assert ((0-1) != 0);
};

test "new and to_string" {
    var tests = [
        # [string integer to_string_must_match to_debug_string_must_match]
        ["123" 123 true true]
        ["0" 0 true true]
        ["-0" 0 false false]
        ["-1" (0-1) true false]
        ["-123" (0-123) true false]
        ["0123" 123 false false]
        [(MANY_ZEROS + "123") 123 false false]
        ["-0123" (0-123) false false]
        [(("-" + MANY_ZEROS) + "123") (0-123) false false]
    ];

    foreach "array" tests {
        var string = (array.get 0);
        var integer = (array.get 1);
        var to_string_must_match = (array.get 2);
        var to_debug_string_must_match = (array.get 3);

        assert ((new Integer string) == integer);
        if to_string_must_match {
            assert ((integer.to_string) == string);
            if (integer >= 0) {
                assert ((integer.to_debug_string) == string);
            };
        };
    };
};

test "to_debug_string" {
    assert ((123.to_debug_string) == "123");
    assert ((1.to_debug_string) == "1");
    assert ((0.to_debug_string) == "0");
    assert (((1-2).to_debug_string) == "(0-1)");
    assert (((123-456).to_debug_string) == "(0-333)");
};

test "limits" {
    var should_work = [
        ["-9223372036854775807" (0-9223372036854775807)]
        [ "9223372036854775807"    9223372036854775807]
    ];

    foreach "pair" should_work {
        var string = (pair.get 0);
        var integer = (pair.get 1);
        assert ((new Integer string) == integer);
        assert ((integer.to_string) == string);
    };

    throws ValueError { var _ = (new Integer "-9223372036854775808"); };
    throws ValueError { var _ = (new Integer "9223372036854775808"); };
};

test "bad integer strings" {
    foreach "bad" [" 1" "1 " "\t1" "1\n"
                   "1+2" "0000-123" "0-123" "--123" "+123" "++123" "+-123" "-+123" "asdasdasd"
                   "123asd" "asd123" "-asd123" MANY_ASDS] {
        throws ValueError { var _ = (new Integer bad); };
    };
};


test "operators" {
    # TODO: test limits with operators
    var numbers = [0 1 (0-1) 2 (0-2)];
    foreach "a" numbers {
        assert (a == a);
        assert (a >= a);
        assert (a <= a);

        foreach "b" numbers {
            if (a == b) {
                assert (a >= b);
                assert (a <= b);
                assert (not (a != b));
                assert (not (a > b));
                assert (not (a < b));
            } else: {
                assert (a != b);
                if (a > b) {
                    assert (not (a < b));
                    assert (a >= b);
                    assert (not (a <= b));
                } else: {
                    assert (a < b);
                    assert (not (a >= b));
                    assert (a <= b);
                };
            };

            # test some math identities
            # if the operators are broken, these should break too
            # TODO: need an operator for powers, this looks ugly
            assert ((a+b) == (b+a));
            assert ((a-b) == ((0-1)*(b-a)));
            assert ((a*b) == (b*a));
            assert (((a+b)-b) == a);
            assert (((a-b)+b) == a);
            assert (((a+b)*(a+b)) == (((a*a) + ((2*a)*b)) + (b*b)));
            assert (((a-b)*(a-b)) == (((a*a) - ((2*a)*b)) + (b*b)));
            assert (((a+b)*(a-b)) == ((a*a) - (b*b)));
            assert ((((a+b)*(a+b))*(a+b)) == (((((a*a)*a)+(((3*a)*a)*b))+(((3*a)*b)*b))+((b*b)*b)));
            foreach "c" numbers {
                assert (((a+b)+c) == (a+(b+c)));
                assert (((a*b)*c) == (a*(b*c)));
                assert (((a+b)*c) == ((a*c) + (b*c)));
                assert (((a-b)*c) == ((a*c) - (b*c)));
            };
        };
    };
    assert ((1+2) == 3);
    assert ((1-2) == (0-1));

    assert ((3*4) == 12);
    assert ((3*(0-4)) == (0-12));
    assert ((3*(0-4)) == (0-12));

    assert (1 < 2);
    assert ((0-1) < 0);
    assert ((0-1) < 1);

    assert (not (1 >= 2));
    assert (1 <= 2);
};
