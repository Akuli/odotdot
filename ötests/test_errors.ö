func "test what how" {
    how.run (new Scope how.definition_scope);
};
func "throws errorclass body" {
    var threw = null;
    catch {
        body.run (new Scope body.definition_scope);
        threw = false;
    } errorclass {
        threw = true;
    };
    assert threw;
};


test "message attribute" {
    var error = (new TypeError "asd asd");
    assert (error.message `equals` "asd asd");
    var asd_debug_string = (error.to_debug_string);

    error.message = "toot";
    assert (error.message `equals` "toot");
    assert (not ((error.to_debug_string) `equals` asd_debug_string));

    throws TypeError {
        error.message = 123;
    };
};


class "AsdTootError" inherits:Error { };
class "AsdError" inherits:AsdTootError { };
class "TootError" inherits:AsdTootError { };


test "throw" {
    throws TypeError { throw "asd"; };
    throws ArgError { throw 1 2 3; };
    throws ArgError { throw (new TypeError "asd") stupid_option:123; };

    # these must be checked with 2 exceptions
    # if throw is failing unexpectedly, it might throw TypeError or ArgError
    # but not both
    throws TypeError { throw (new TypeError "asd"); };
    throws ArgError { throw (new ArgError "asd"); };
};

test "catch" {
    # success case
    var ran = false;
    catch {
    } AsdError {
        ran = true;
    };
    assert (not ran);

    # catching by superclass
    var ran = false;
    catch {
        throw (new AsdError "lol");
    } AsdTootError {
        ran = true;
    };
    assert ran;

    # not catching by subclass
    throws AsdTootError {
        catch {
            throw (new AsdTootError "lol");
        } AsdError { };
    };

    # catch block throws
    throws TootError {
        catch {
            throw (new AsdError "lol");
        } AsdError {
            throw (new TootError "lol");
        };
    };

    # throw and catch must not copy exception objects
    var ran = false;
    var e1 = (new TypeError "asd");
    catch {
        throw e1;
    } [TypeError "e2"] {
        assert (e1 `same_object` e2);
        ran = true;
    };
    assert ran;

    # the "what to catch" argument of catch is handled specially, it's not just a type check
    # so make sure that works
    throws TypeError { catch {} "lol" {}; };
    throws TypeError { catch {} String {}; };   # String is not an error class
    throws TypeError { catch {} [AsdError 123] {}; };   # String is not an error class
    throws TypeError { catch {} [123 "hi"] {}; };   # String is not an error class
    throws ValueError { catch {} [] {}; };
    throws ValueError { catch {} [AsdError] {}; };
    throws ValueError { catch {} [AsdError "lol" 123] {}; };
};

test "the stack attribute" {
    var e = (new AsdError "lol");
    assert (e.stack `same_object` null);

    throws TypeError { e.stack = "lol"; };
    assert (e.stack `same_object` null);

    # right now any arrays are allowed
    # because e.stack is an array, and anything can be added to arrays at any time
    e.stack = [1 2 3];
    assert (e.stack `equals` [1 2 3]);
    e.stack = null;
    assert (e.stack `same_object` null);
};

test "how throw sets the stack attribute" {
    var e = (new AsdError "lol");
    assert (e.stack `same_object` null);

    var throwscope = null;
    throws AsdError {
        throwscope = {}.definition_scope;
        throw e;
    };
    assert (not (e.stack `same_object` null));
    assert (e.stack `is_instance_of` Array);

    # lineno isn't cheked exactly because changing the tests changes line numbers
    var last_frame = (e.stack.get (e.stack.length.plus -1));
    #assert (last_frame.scope `same_object` throwscope);
    assert (last_frame.filename `equals` "ötests/test_errors.ö");
    assert (last_frame.lineno `is_instance_of` Integer);
};

test "that the stack doesn't get set on rethrowing" {
    var e = (new AsdError "lol");
    throws AsdError {
        throw e;
    };

    var old_stack = e.stack;
    var old_stack_copy = (e.stack.slice 0);   # because rethrowing must not change the content of the array
    assert (not (old_stack `same_object` old_stack_copy));
    assert (old_stack `equals` old_stack_copy);

    throws AsdError {
        throw e;
    };
    assert (e.stack `same_object` old_stack);
    assert (e.stack `equals` old_stack_copy);
};
