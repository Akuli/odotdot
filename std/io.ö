var encodings = (import "encodings");


func "run_block_with_file_as_var block file varname" {
    var scope = (new Scope block.definition_scope);
    scope.local_vars.set varname file;

    var error = none;
    catch {
        block.run scope;
    } [Error "e"] {
        error = (new Option e);
    };

    file.close;
    if (error != none) {
        throw (error.get_value);
    };
};

export {
    class "FileLikeBase" {

        # always override with a getter and no setter
        abstract "closed";

        # override with a method
        # no args, returns nothing
        # should call check_closed, do its thing and make the closed attribute return true
        abstract "close";

        # meant to be used by subclasses when calling pretty much anything
        method "check_closed" {
            if this.closed {
                throw (new ValueError ("cannot read from a closed " + (get_class this).name));
            };
        };

        # override for readable file-likes
        # call check_closed, read at most maxsize bytes, move pos by number of bytes read and return the bytes
        method "read_chunk maxsize" returning:true {
            throw (new ValueError ("cannot read from " + (this.to_debug_string)));
        };

        method "read_all" returning:true {
            # TODO: optimize (ByteArray + ByteArray)
            var result = (new ByteArray []);

            while { true } {
                var chunk = (this.read_chunk 4096);    # calls check_closed
                if (chunk.length == 0) {
                    return result;
                };
                result = (result + chunk);
            };
        };

        # override for writable file-likes
        # write the bytes, moving pos forward by bytearray.length
        method "write bytearray" {
            throw (new ValueError ("cannot write to " + (this.to_debug_string)));
        };

        # override set_pos and get_pos for seekable file-likes
        # set_pos is like fseek(f, pos, SEEK_SET) in C, get_pos is like ftell
        # pos is not a magic attribute because it would "do too much" imo
        # set_pos: if pos is negative or bigger than length of file, use closest ok value instead
        method "set_pos pos" {
            throw (new ValueError ("cannot seek " + (this.to_debug_string)));
        };
        method "get_pos" returning:true {
            throw (new ValueError ("cannot tell the current position of " + (this.to_debug_string)));
        };

        method "as varname block" {
            this.check_closed;
            run_block_with_file_as_var block this varname;
        };

        # override and call check_closed if there is something that can be done to flush stuff
        method "flush" {
            this.check_closed;
        };
    };


    class "FakeFile" inherits:FileLikeBase {

        # TODO: need real privates :(
        attrib "_private_bytearray";
        attrib "_private_pos";
        attrib "_private_closed";

        method "setup initial_value?" {
            this._private_bytearray = (initial_value.get_with_fallback (new ByteArray []));
            this._private_pos = 0;
            this._private_closed = false;
        };

        getter "bytearray" { this._private_bytearray };
        getter "closed" { this._private_closed };

        # TODO: add a to_debug_string when ByteArrays have it

        method "read_chunk maxsize" returning:true {
            this.check_closed;
            var slice = (this._private_bytearray.slice this._private_pos (this._private_pos+maxsize));
            this._private_pos = (this._private_pos + slice.length);   # handles reading past end of file
            return slice;
        };

        method "write bytearray" {
            this.check_closed;
            var before = (this._private_bytearray.slice 0 this._private_pos);
            this._private_pos = (this._private_pos + bytearray.length);
            var after = (this._private_bytearray.slice this._private_pos this._private_bytearray.length);
            this._private_bytearray = ((before + bytearray) + after);
        };

        method "set_pos pos" {
            this.check_closed;
            if (pos < 0) {
                pos = 0;
            };
            if (pos > this._private_bytearray.length) {
                pos = this._private_bytearray.length;
            };
            this._private_pos = pos;
        };

        method "get_pos" returning:true {
            this.check_closed;
            return this._private_pos;
        };

        method "close" {
            this.check_closed;
            this._private_closed = true;
        };
    };


    # TODO: come up with a better name for this
    # StringWrapper sounds like it wraps a string
    # TextWrapper sounds like it wraps text
    # TextFileWrapper is too long
    # TextFile doesn't specify that it wraps
    # TextFileLike is too long and makes it feel like it inherits FileLike, but it doesn't
    # TextWrapperFileStringWrapperText is java
    class "StringWrapper" {
        attrib "_private_wrapped";
        attrib "_private_encoding";

        method "setup wrapped encoding?" {
            this._private_wrapped = wrapped;
            this._private_encoding = (encoding.get_with_fallback "utf-8");
            var _ = (encodings.get this._private_encoding);   # make sure the encoding exists
        };

        getter "wrapped" { this._private_wrapped };
        getter "encoding" { this._private_encoding };

        getter "closed" { this.wrapped.closed };
        getter "close" { this.wrapped.close };
        # TODO: read_chunk, but it requires decoding data that may be incomplete
        method "read_all" returning:true { ((this.wrapped.read_all).to_string this.encoding) };
        method "write string" { this.wrapped.write (string.to_byte_array this.encoding); };
        # set_pos and get_pos work with bytes, so they don't make sense for text
        getter "flush" { this.wrapped.flush };

        method "as varname block" {
            this.wrapped.check_closed;
            run_block_with_file_as_var block this varname;
        };
    };
};


var builtin_scope = {}.definition_scope;
while { (builtin_scope.parent_scope != none) } {
    builtin_scope = (builtin_scope.parent_scope.get_value);
};

export {
    var File = (builtin_scope.local_vars.get_and_delete "File");
};
File.baseclass = (new Option FileLikeBase);


export {
    func "open path reading? writing? binary?" returning:true {
        reading = (reading.get_with_fallback false);
        writing = (writing.get_with_fallback false);
        binary = (binary.get_with_fallback false);
        if (not (reading `or` writing)) {
            throw (new ArgError "can't open a file without reading:true or writing:true");
        };
        # but allow both reading and writing

        var file = (new File path reading writing binary);
        if (not binary) {
            file = (new StringWrapper file);
        };
        return file;
    };
};
