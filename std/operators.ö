var builtin_scope = ({}.definition_scope.parent_scope.get_value);
assert (builtin_scope.parent_scope `same_object` none);   # it is actually the built-in scope

# the interpreter creates these as built-in functions
# that's the only way to get stuff from the interpreter to an รถ library (lol)
var get_and_hide_builtin = builtin_scope.local_vars.get_and_delete;

export {
    var add_array = (get_and_hide_builtin "add_oparray");
    var sub_array = (get_and_hide_builtin "sub_oparray");
    var mul_array = (get_and_hide_builtin "mul_oparray");
    var div_array = (get_and_hide_builtin "div_oparray");
    var eq_array = (get_and_hide_builtin "eq_oparray");
    var lt_array = (get_and_hide_builtin "lt_oparray");
};


# right now the arrays contain stuff that are needed for starting up the interpreter this far
# but as much as possible is implemented here

# TODO: get rid of this?? this is dumb, comparing objects should make TypeError by default
eq_array.push (lambda "x y" returning:true {
    if (x `same_object` y) {
        return (new Option true);
    };
    return none;
});

eq_array.push (lambda "x y" returning:true {
    if ((x `is_instance_of` Option) `and` (y `is_instance_of` Option)) {
        if ((x `same_object` none) `and` (y `same_object` none)) {
            return (new Option true);
        };
        if ((x `same_object` none) `or` (y `same_object` none)) {
            return (new Option false);
        };
        return (new Option (x.(get_value) == y.(get_value)));
    };
    return none;
});

eq_array.push (lambda "x y" returning:true {
    if ((x `is_instance_of` Bool) `and` (y `is_instance_of` Bool)) {
        # have fun figuring this out
        return (new Option ((x `and` y) `or` ((not x) `and` (not y))));
    };
    return none;
});

eq_array.push (lambda "x y" returning:true {
    if ((x `is_instance_of` Array) `and` (y `is_instance_of` Array)) {
        if (x.length != y.length) {
            return (new Option false);
        };

        for { var i=0; } { (i < x.length) } { i = (i+1); } {
            if (x.(get i) != y.(get i)) {
                return (new Option false);
            };
        };

        return (new Option true);
    };
    return none;
});

# TODO: add some way to loop through Mappings and implement mapping eq here
