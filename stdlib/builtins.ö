# FIXME: these suck
var true = "true";
var false = "false";
var null = "null";

# the C code doesn't set this to null because null doesn't exist yet
{}.definition_scope.parent_scope = null;

var not = (new Mapping [[true false] [false true]])::get;

# store if_mapping and raw_if permanently, but hide them in a subscope
var if = null;   # set soon
{
    var if_mapping = (new Mapping [
        [ true { body::run (new Scope body.definition_scope); } ]
        [ false { } ]
    ]);

    var raw_if = (array_func {
        var cond = (arguments::get 0);
        var body = (arguments::get 1);

        (if_mapping::get cond)::run {}.definition_scope;
    });

    if = (array_func {
        raw_if (not ((arguments::get_length) `equals` 2)) {
            error "if takes exactly 2 arguments";
        };
        # TODO: type checks
        raw_if (arguments::get 0) (arguments::get 1);
    });
}::run (new Scope {}.definition_scope);

# VERY STUPID
# usage example:
#
#   # strip spaces from a string
#   var s = "      lol";
#   while { keep_going = ((s::get 0) `equals` " "); } {
#       s = (s::slice 1);
#   };
#   print s;    # prints "lol"
#
# infinite loops segfault
var while = (array_func {
    var cond = (arguments::get 0);
    var body = (arguments::get 1);

    var scope = (new Scope body.definition_scope);
    scope.local_vars::set "keep_going" null;

    var run_stuff = {
        cond::run scope;
        if (scope.local_vars::get "keep_going") {
            body::run scope;
            run_stuff::run run_stuff.definition_scope;
        };
    };
    run_stuff::run run_stuff.definition_scope;
});
