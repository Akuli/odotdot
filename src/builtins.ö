# this file runs in the built-in scope on interpreter startup
# when the interpreter is compiled, this file is included in the executable in a funny way
# see the Makefile and run.c for more about how running this code works

var Class = (get_class String);

# errors are defined as early as possible because rest of the code may throw them
var ArgError = (new Class "ArgError" Error);
var AssertError = (new Class "AssertError" Error);
var AttribError = (new Class "AttribError" Error);
var IoError = (new Class "IoError" Error);
var KeyError = (new Class "KeyError" Error);
var MathError = (new Class "MathError" Error);
var TypeError = (new Class "TypeError" Error);
var ValueError = (new Class "ValueError" Error);
var VariableError = (new Class "VariableError" Error);

# delete is not there yet, it's created below
{}.definition_scope.local_vars.get_and_delete "Class";

var add_method = (lambda "klass name lambda_with_this" {
    var getter = (lambda "this" {
        var result = (lambda_with_this.partial this);
        result.name = (name + " method");
        return result;
    });

    getter.name = ("getter of " + name);
    klass.getters.set name getter;
});

add_method (get_class add_method) "to_debug_string" (lambda "this" {
    return (("<Function " + (this.name.to_debug_string)) + ">");
});

add_method (get_class String) "to_debug_string" (lambda "this" {
    return (("<Class " + (this.name.to_debug_string)) + ">");
});

add_method Error "to_debug_string" (lambda "this" {
    return (((("<" + (get_class this).name) + ": ") + (this.message.to_debug_string)) + ">");
});

add_method Bool "setup" (lambda "this" {
    throw (new TypeError "cannot create new Bool objects, use true and false instead");
});

add_method Bool "to_debug_string" (lambda "this" {
    return ((new Mapping [[true "true"] [false "false"]]).get this);
});

add_method (get_class null) "to_debug_string" (lambda "this" { "null" });

add_method Option "to_debug_string" (lambda "this" {
    if this.is_none {
        return "none";
    };
    return (("<Option: " + (this.value.to_debug_string)) + ">");
});

add_method Mapping "delete" (lambda "this key" {
    # like get_and_delete, but throws away the return value and returns null
    # i guess explicit > implicit or something... :D
    this.get_and_delete key;
});

# TODO: use an option instead
add_method Mapping "get_with_fallback" (lambda "this key fallback" {
    catch {
        return (this.get key);
    } KeyError {
        return fallback;
    };
});

add_method Integer "to_debug_string" (lambda "this" {
    if (this >= 0) {
        # "123"
        return (this.to_string);
    };

    # -1234 is not valid Ã– code, but (0-1234) is
    return (("(0" + (this.to_string)) + ")");
});

add_method Array "to_debug_string" (lambda "this" {
    if (this.length == 0) {
        return "[]";
    };

    var result = ((this.get 0).to_debug_string);
    for { var i=1; } { (i < this.length) } { i = (i+1); } {
        result = ((result + " ") + ((this.get i).to_debug_string));
    };
    return (("[" + result) + "]");
});


# scope magic: variables created inside this thing are not visible outside it
{
    # get the StackFrame class
    var StackFrame = null;
    catch {
        throw (new MathError "1 + 2 is not 3");
    } [MathError "e"] {
        StackFrame = (get_class (e.stack.get 0));
    };
    if (StackFrame `same_object` null) {
        throw (new AssertError "throw and catch don't seem to work");
    };

    add_method StackFrame "to_string" (lambda "this" {
        return ((("file " + this.filename) + ", line ") + (this.lineno.to_string));
    });

    add_method StackFrame "to_debug_string" (lambda "this" {
        return (("<StackFrame: " + (this.to_string)) + ">");
    });
}.run (new Scope {}.definition_scope);


add_method Error "print_stack" (lambda "this" {
    # TODO: use stderr instead of stdout
    catch {
        print (((get_class this).name + ": ") + this.message);

        if (not (this.stack `same_object` null)) {
            var prefix = "in";
            for { var stack_copy = (this.stack.slice 0); } { (stack_copy.length != 0) } {} {
                var frame = (stack_copy.pop);
                print ((("  " + prefix) + " ") + (frame.to_string));
                # TODO: print the source line

                if (prefix == "in") {
                    prefix = "by";
                };
            };
        };
    } Error {    # avoid recursion!
        print "got another error while printing the stack trace of an error";
    };
});


var func = (lambda "funcname_and_argnames block" {
    var splitted = (funcname_and_argnames.split_by_whitespace);
    if (splitted.length == 0) {
        throw (new ValueError "func's string argument must not be empty");
    };

    # a stupid way to join strings by spaces
    # initial i=1 skips the function name
    var argnames = "";
    for { var i = 1; } { (i < splitted.length) } { i = (i + 1); } {
        argnames = (argnames + (splitted.get i));
        argnames = (argnames + " ");
    };

    var result = (lambda argnames block);
    result.name = (splitted.get 0);
    block.definition_scope.local_vars.set result.name result;
});
func.name = "func";

func "while condition body" {
    for {} condition {} body;
};


func "switch value switchblock" {
    var switchscope = (new Scope switchblock.definition_scope);

    func "case matched block" {
        if (value == matched) {
            # if the block calls return, it's the switchscope's return
            # that is added by the run_with_return
            # if the block doesn't call return, executing the cases continues
            # aka fall through
            block.run (new Scope switchscope);
        };
    };

    func "default block" {
        # always run, because this is after cases that return
        block.run (new Scope switchscope);
    };

    switchscope.local_vars.set "case" case;
    switchscope.local_vars.set "default" default;
    return (switchblock.run_with_return switchscope);
};

# TODO: how about putting the array inside itself? python does this:
# >>> asd = [1, 2, 3]
# >>> asd.append(asd)
# >>> asd
# [1, 2, 3, [...]]
add_method String "to_debug_string" (lambda "this" {
    var result = "";

    for { var i=0; } { (i != this.length) } { i = (i + 1); } {
        var character = (this.get i);

        # not very efficient, but that's not a problem because this method is just for debugging anyway
        result = (result + (switch character {
            case "\n" { "\\n" };
            case "\t" { "\\t" };
            case "\\" { "\\\\" };
            case "\"" { "\\\"" };
            default { character };
        }));
    };

    return (("\"" + result) + "\"");
});


func "debug x" {
    print (x.to_debug_string);
};

func "not x" {
    # 'if x' throws an error if x is not a boolean
    if x {
        return false;
    };
    return true;
};

func "and x y" {
    if x {
        if y {
            return true;
        };
    } else: {
        # no matter what x is, an error must be thrown if y is not a Bool
        # this checks it :D
        not y;
    };

    return false;
};

func "or x y" {
    return (not ((not x) `and` (not y)));
};

func "assert condition" {
    if (not condition) {
        throw (new AssertError "assertion failed");
    };
};

func "is_instance_of instance klass" {
    # TODO: throw a good error if klass is not actually a class
    var subclass = (get_class instance);

    # check if 'subclass' is a subclass of 'klass'
    while { (not (subclass `same_object` null)) } {
        if (subclass `same_object` klass) {
            return true;
        };
        subclass = subclass.baseclass;
    };
    return false;
};

# example:
#
#    foreach "x" [1 2 3] {
#        print (x.to_string);
#    };
func "foreach varname array block" {
    var scope = (new Scope block.definition_scope);
    for { var i = 0; } { (i != array.length) } { i = (i + 1); }
    {
        scope.local_vars.set varname (array.get i);
        block.run scope;
    };
};


{
    # gets and deletes a variable from built-in scope
    var get_and_hide_builtin = {}.definition_scope.parent_scope.local_vars.get_and_delete;

    # objects have an attrdata mapping that attributes can store their values in
    # it's not useful anywhere else because one can just create attributes using this code
    # so we hide it from the rest of the world here
    var get_attrdata = (get_and_hide_builtin "get_attrdata");
    var add_method = (get_and_hide_builtin "add_method");

    func "class class_name initializer_block inherits:" {
        if (inherits `same_object` null) {
            inherits = Object;
        };

        var klass = (new (get_class String) class_name inherits);

        func "getter name block" {
            var function = (lambda "this" block);
            function.name = ("getter of " + name);
            klass.getters.set name function;
        };

        func "setter name varname block" {
            var function = (lambda ("this " + varname) block);
            function.name = ("setter of " + name);
            klass.setters.set name function;
        };

        func "abstract name" {
            getter name {
                throw (new AttribError ("cannot get abstract attribute " + (name.to_debug_string)));
            };
        };

        func "attrib name" {
            getter name {
                catch {
                    return ((get_attrdata this).get name);
                } KeyError {
                    throw (new AttribError (("the value of " + (name.to_debug_string)) + " hasn't been set"));
                };
            };
            setter name "new_value" {
                return ((get_attrdata this).set name new_value);
            };
        };

        func "method methname_and_argnames block" {
            # see func for details, some of this is copied from there
            var splitted = (methname_and_argnames.split_by_whitespace);
            if (splitted.length == 0) {
                throw (new ValueError "method's string argument must not be \"\"");
            };

            # i=1 skips the method name
            var this_and_args = "this";
            for { var i = 1; } { (i != splitted.length) } { i = (i + 1); } {
                this_and_args = (this_and_args + " ");
                this_and_args = (this_and_args + (splitted.get i));
            };

            add_method klass (splitted.get 0) (lambda this_and_args block);
        };

        var init_scope = (new Scope initializer_block.definition_scope);
        init_scope.local_vars.set "getter" getter;
        init_scope.local_vars.set "setter" setter;
        init_scope.local_vars.set "abstract" abstract;
        init_scope.local_vars.set "attrib" attrib;
        init_scope.local_vars.set "method" method;
        initializer_block.run init_scope;

        initializer_block.definition_scope.local_vars.set class_name klass;
    };

    # export class to the built-in scope, but keep get_attrdata and stuff here
    {}.definition_scope.parent_scope.local_vars.set "class" class;
}.run (new Scope {}.definition_scope);


{
    # allow importers to be deleted from the built-in scope
    var importers = importers;
    var Library = null;

    func "import string as:" {
        # get a stack with an error
        var stack = null;
        catch {
            throw (new Error "oh no");
        } [Error "e"] {
            stack = e.stack;
        };
        assert (not (stack `same_object` null));

        # last frame is the throw
        # the frame before that is this function
        # we want the one before that
        var frame = (stack.get (stack.length - 3));

        foreach "importer" importers {
            var lib = (importer string frame);

            if (not (lib `same_object` null)) {
                if (Library `same_object` null) {
                    # this is a funny way to get the Library class
                    # the only way to access it is to import something
                    Library = (get_class lib);
                } else: {
                    if (not (lib `is_instance_of` Library)) {
                        # need string formatting :(
                        throw (new TypeError ((("importers should return a Library object or null, but " +
                            (importer.to_debug_string)) + " returned ") + (lib.to_debug_string)));
                    };
                };

                if (not (as `same_object` null)) {
                    frame.scope.local_vars.set as lib;
                };
                return lib;
            };
        };

        # FIXME: ValueError feels wrong
        throw (new ValueError ("cannot import " + (string.to_debug_string)));
    };

    {}.definition_scope.parent_scope.local_vars.set "import" import;
}.run (new Scope {}.definition_scope);

# these files do magic, they delete stuff from the built-in scope
# see comments in these files for details
import "<std>/imports";
import "<std>/operators";
